"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getFrameAccountAddress_1 = require("./getFrameAccountAddress");
const mock_1 = require("./mock");
const neynarUserFunctions_1 = require("../utils/neynar/user/neynarUserFunctions");
jest.mock('../utils/neynar/user/neynarUserFunctions', () => {
    return {
        neynarBulkUserLookup: jest.fn(),
    };
});
jest.mock('@farcaster/hub-nodejs', () => {
    return {
        getSSLHubRpcClient: jest.fn().mockReturnValue({
            validateMessage: jest.fn(),
        }),
        Message: {
            decode: jest.fn(),
        },
    };
});
describe('getFrameAccountAddress', () => {
    const fakeMessage = {
        fid: 1234,
    };
    const fakeApiKey = {
        NEYNAR_API_KEY: '1234',
    };
    it('should return the first verification for valid input', async () => {
        const addresses = ['0xaddr1'];
        (0, mock_1.mockNeynarResponse)(fakeMessage.fid, addresses, neynarUserFunctions_1.neynarBulkUserLookup);
        const response = await (0, getFrameAccountAddress_1.getFrameAccountAddress)(fakeMessage, fakeApiKey);
        expect(response).toEqual(addresses[0]);
    });
    it('should return undefined for invalid input', async () => {
        (0, mock_1.mockNeynarResponse)(fakeMessage.fid, undefined, neynarUserFunctions_1.neynarBulkUserLookup);
        const response = await (0, getFrameAccountAddress_1.getFrameAccountAddress)(fakeMessage, fakeApiKey);
        expect(response).toBeUndefined();
    });
});
//# sourceMappingURL=getFrameAccountAddress.test.js.map